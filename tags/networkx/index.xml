<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>networkx on Physics to Data Science</title>
    <link>https://physhik.github.io/tags/networkx/</link>
    <description>Recent content in networkx on Physics to Data Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Sep 2017 13:30:00 -0700</lastBuildDate><atom:link href="https://physhik.github.io/tags/networkx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neural Network (3) : Hopfield Net</title>
      <link>https://physhik.github.io/2017/09/neural-network-3-hopfield-net/</link>
      <pubDate>Sun, 10 Sep 2017 13:30:00 -0700</pubDate>
      
      <guid>https://physhik.github.io/2017/09/neural-network-3-hopfield-net/</guid>
      <description>Binary Hopfield net using Hebbian learning We want to study Hopfield net from the simple case. Hopfield net is a fully connected feedback network. A feedback network is a network that is not a feedforward network, and in a feedforward network, all the connections are directed. All the connections in our example will be bi-directed. This symmetric property of the weight is important property of the Hopfield net.
Hopfield net can act as associative memories, and they can be used to solve optimization problems.</description>
    </item>
    
    <item>
      <title>networkx (3)</title>
      <link>https://physhik.github.io/_draft/2017-08-17-networkx_practice3/</link>
      <pubDate>Thu, 17 Aug 2017 21:25:00 -0700</pubDate>
      
      <guid>https://physhik.github.io/_draft/2017-08-17-networkx_practice3/</guid>
      <description>hash hashable from glossary An object is hashable if it has a hash value which never changes during its lifetime (it needs a hash() method), and can be compared to other objects (it needs an eq() or cmp() method). Hashable objects which compare equal must have the same hash value.
Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.</description>
    </item>
    
    <item>
      <title>networkx (2)</title>
      <link>https://physhik.github.io/_draft/2017-08-16-networkx_practice2/</link>
      <pubDate>Wed, 16 Aug 2017 22:50:00 -0700</pubDate>
      
      <guid>https://physhik.github.io/_draft/2017-08-16-networkx_practice2/</guid>
      <description>Let us start from the same graph, G of the previous posting.
import networkx as nx import matplotlib.pyplot as plt %matplotlib inline ** DiGraph
I=nx.DiGraph(G) I.nodes(data=True) [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (&#39;m&#39;, {}), (&#39;p&#39;, {}), (&#39;s&#39;, {}), (&#39;a&#39;, {}), (&#39;spam&#39;, {})]  G.nodes(data=True) [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (&#39;m&#39;, {}), (&#39;p&#39;, {}), (&#39;spam&#39;, {}), (&#39;s&#39;, {}), (&#39;a&#39;, {})]  G.</description>
    </item>
    
    <item>
      <title>networkx (1)</title>
      <link>https://physhik.github.io/_draft/2017-08-16-networkx_practice/</link>
      <pubDate>Wed, 16 Aug 2017 16:50:00 -0700</pubDate>
      
      <guid>https://physhik.github.io/_draft/2017-08-16-networkx_practice/</guid>
      <description>While studying deep learning, to understand graph and networks is necessary.
I try to follow the tutorial and references from the Github of networkx. The homepage of networkx is designed to have better interface, but some codes are not updated. I also added up some comments for better understanding.
import networkx as nx import matplotlib.pyplot as plt %matplotlib inline Node Initiate empty graph
G = nx.Graph() Can see the nodes as following</description>
    </item>
    
  </channel>
</rss>
